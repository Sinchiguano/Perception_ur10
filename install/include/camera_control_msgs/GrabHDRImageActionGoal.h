// Generated by gencpp from file camera_control_msgs/GrabHDRImageActionGoal.msg
// DO NOT EDIT!


#ifndef CAMERA_CONTROL_MSGS_MESSAGE_GRABHDRIMAGEACTIONGOAL_H
#define CAMERA_CONTROL_MSGS_MESSAGE_GRABHDRIMAGEACTIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <actionlib_msgs/GoalID.h>
#include <camera_control_msgs/GrabHDRImageGoal.h>

namespace camera_control_msgs
{
template <class ContainerAllocator>
struct GrabHDRImageActionGoal_
{
  typedef GrabHDRImageActionGoal_<ContainerAllocator> Type;

  GrabHDRImageActionGoal_()
    : header()
    , goal_id()
    , goal()  {
    }
  GrabHDRImageActionGoal_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal_id(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goal_id_type;
  _goal_id_type goal_id;

   typedef  ::camera_control_msgs::GrabHDRImageGoal_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GrabHDRImageActionGoal_

typedef ::camera_control_msgs::GrabHDRImageActionGoal_<std::allocator<void> > GrabHDRImageActionGoal;

typedef boost::shared_ptr< ::camera_control_msgs::GrabHDRImageActionGoal > GrabHDRImageActionGoalPtr;
typedef boost::shared_ptr< ::camera_control_msgs::GrabHDRImageActionGoal const> GrabHDRImageActionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace camera_control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'camera_control_msgs': ['/home/casch/ws_moveit/devel/share/camera_control_msgs/msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c08d057fa5b13f1882960fef1c0cc286";
  }

  static const char* value(const ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc08d057fa5b13f18ULL;
  static const uint64_t static_value2 = 0x82960fef1c0cc286ULL;
};

template<class ContainerAllocator>
struct DataType< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "camera_control_msgs/GrabHDRImageActionGoal";
  }

  static const char* value(const ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalID goal_id\n"
"GrabHDRImageGoal goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalID\n"
"# The stamp should store the time at which this goal was requested.\n"
"# It is used by an action server when it tries to preempt all\n"
"# goals that were requested before a certain time\n"
"time stamp\n"
"\n"
"# The id provides a way to associate feedback and\n"
"# result message with specific goal requests. The id\n"
"# specified must be unique.\n"
"string id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: camera_control_msgs/GrabHDRImageGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"##########################################\n"
"################## GOAL ##################\n"
"##########################################\n"
"\n"
"# Flag which indicates if the exposure times are provided and hence should be\n"
"# set before grabbing\n"
"bool exposure_given\n"
"\n"
"# The list of target exposure time in microseconds.\n"
"# It is possible to grab only one image as well as several images with\n"
"# different exposure times. This values can be overriden from the brightness\n"
"# search, in case that the flag exposure_fixed is not true.\n"
"# The interface will only try to set these values if the exposure_given flag is\n"
"# set to true.\n"
"float32[] exposure_times\n"
"\n"
"# If the exposure_fixed flag is set, the exposure time will stay fix in\n"
"# case of a brightness search. Hence the target brightness will be reached\n"
"# only by varying the gain\n"
"bool exposure_fixed\n"
"\n"
"\n"
"# Flag which indicates if the brightness values are provided and hence should\n"
"# be set before grabbing\n"
"bool brightness_given\n"
"\n"
"# The average intensity values of the images. It depends the exposure time\n"
"# as well as the gain setting. The interface will only try to reach this\n"
"# value if the brightness_given flag is set to true.\n"
"float32[] brightness_values\n"
"\n"
"# The brightness_continuous flag controls the auto brightness function.\n"
"# If it is set to false, the given brightness will only be reached once.\n"
"# Hence changing light conditions lead to changing brightness values.\n"
"# If it is set to true, the given brightness will be reached continuously,\n"
"# trying to adapt to changing light conditions.\n"
"bool brightness_continuous\n"
"\n"
"\n"
"# Flag which indicates if the gain is provided and hence should be set before\n"
"# grabbing\n"
"bool gain_given\n"
"\n"
"# The target gain values in percent of the maximal value the camera supports\n"
"# For USB-Cameras, the gain is in dB, for GigE-Cameras it is given in so\n"
"# called 'device specific units'. This value can be overriden from the\n"
"# brightness search, in case that the gain_fixed flag is set to false.\n"
"# The interface will only try to reach this values if the gain_given flag is\n"
"# set to true.\n"
"float32[] gain_values\n"
"\n"
"# If the gain_fixed flag is set, the gain value will stay fix in\n"
"# case of a brightness search. Hence the target brightness will be reached\n"
"# only by varying the exposure\n"
"bool gain_fixed\n"
"\n"
"# Flag which indicates if the gamma value is provided and hence should be set\n"
"# before grabbing\n"
"bool gamma_given\n"
"\n"
"# Gamma correction of pixel intensity.\n"
"# Adjusts the brightness of the pixel values output by the camera's sensor\n"
"# to account for a non-linearity in the human perception of brightness or\n"
"# of the display system (such as CRT).\n"
"# The interface will only try to reach this value if the gamma_given flag is\n"
"# set to true.\n"
"float32[] gamma_values\n"
"\n"
;
  }

  static const char* value(const ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_id);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GrabHDRImageActionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::camera_control_msgs::GrabHDRImageActionGoal_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
    s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::camera_control_msgs::GrabHDRImageGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAMERA_CONTROL_MSGS_MESSAGE_GRABHDRIMAGEACTIONGOAL_H
