# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from camera_control_msgs/GrabImagesGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GrabImagesGoal(genpy.Message):
  _md5sum = "c62b1b0356df57d5bde902f61c90337a"
  _type = "camera_control_msgs/GrabImagesGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
##########################################
################## GOAL ##################
##########################################

# Flag which indicates if the exposure times are provided and hence should be
# set before grabbing
bool exposure_given

# Only relevant, if exposure_given is true:
# The list of target exposure times in microseconds.
# It is possible to grab only one image as well as several images with
# different exposure times. This values can be overriden from the brightness
# search, in case that the flag exposure_fixed is not true.
float32[] exposure_times

# Flag which indicates if the gain is provided and hence should be set before
# grabbing
bool gain_given

# Only relevant, if gain_given is true:
# The target gain in percent of the maximal value the camera supports.
# For USB-Cameras, the gain is in dB, for GigE-Cameras it is given in so
# called 'device specific units'. This value can be overriden from the
# brightness search, in case that the gain_fixed flag is set to false.
float32[] gain_values

# Flag which indicates if the gamma value is provided and hence should be set
# before grabbing
bool gamma_given

# Only relevant, if gain_given is true:
# Gamma correction of pixel intensity.
# Adjusts the brightness of the pixel values output by the camera's sensor
# to account for a non-linearity in the human perception of brightness or
# of the display system (such as CRT).
float32[] gamma_values

# Flag which indicates if the brightness values are provided and hence should
# be set before grabbing
bool brightness_given

# Only relevant, if brightness_given is true:
# The average intensity values of the images. It depends the exposure time
# as well as the gain setting.
float32[] brightness_values

# Only relevant, if brightness_given is true:
# If the camera should try reach the desired brightness, at least one of the
# following flags MUST be set. If both are set, the interface will use the
# profile that tries to keep the gain at minimum to reduce white noise.
# 'exposure_auto' will adapt the exposure time to reach the brightness, wheras
# 'gain_auto' does so by adapting the gain. If one of these flags is set to
# false, the connected property will be kept fix.
# In most of the cases trying to reach a target brightness only by varying the
# gain and keeping the exposure time fix is not a good approach, because the
# exposure range is many times higher than the gain range.
bool exposure_auto
bool gain_auto

"""
  __slots__ = ['exposure_given','exposure_times','gain_given','gain_values','gamma_given','gamma_values','brightness_given','brightness_values','exposure_auto','gain_auto']
  _slot_types = ['bool','float32[]','bool','float32[]','bool','float32[]','bool','float32[]','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       exposure_given,exposure_times,gain_given,gain_values,gamma_given,gamma_values,brightness_given,brightness_values,exposure_auto,gain_auto

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GrabImagesGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.exposure_given is None:
        self.exposure_given = False
      if self.exposure_times is None:
        self.exposure_times = []
      if self.gain_given is None:
        self.gain_given = False
      if self.gain_values is None:
        self.gain_values = []
      if self.gamma_given is None:
        self.gamma_given = False
      if self.gamma_values is None:
        self.gamma_values = []
      if self.brightness_given is None:
        self.brightness_given = False
      if self.brightness_values is None:
        self.brightness_values = []
      if self.exposure_auto is None:
        self.exposure_auto = False
      if self.gain_auto is None:
        self.gain_auto = False
    else:
      self.exposure_given = False
      self.exposure_times = []
      self.gain_given = False
      self.gain_values = []
      self.gamma_given = False
      self.gamma_values = []
      self.brightness_given = False
      self.brightness_values = []
      self.exposure_auto = False
      self.gain_auto = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.exposure_given))
      length = len(self.exposure_times)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.exposure_times))
      buff.write(_get_struct_B().pack(self.gain_given))
      length = len(self.gain_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.gain_values))
      buff.write(_get_struct_B().pack(self.gamma_given))
      length = len(self.gamma_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.gamma_values))
      buff.write(_get_struct_B().pack(self.brightness_given))
      length = len(self.brightness_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.brightness_values))
      _x = self
      buff.write(_get_struct_2B().pack(_x.exposure_auto, _x.gain_auto))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.exposure_given,) = _get_struct_B().unpack(str[start:end])
      self.exposure_given = bool(self.exposure_given)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.exposure_times = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.gain_given,) = _get_struct_B().unpack(str[start:end])
      self.gain_given = bool(self.gain_given)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.gain_values = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.gamma_given,) = _get_struct_B().unpack(str[start:end])
      self.gamma_given = bool(self.gamma_given)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.gamma_values = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.brightness_given,) = _get_struct_B().unpack(str[start:end])
      self.brightness_given = bool(self.brightness_given)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.brightness_values = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 2
      (_x.exposure_auto, _x.gain_auto,) = _get_struct_2B().unpack(str[start:end])
      self.exposure_auto = bool(self.exposure_auto)
      self.gain_auto = bool(self.gain_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.exposure_given))
      length = len(self.exposure_times)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.exposure_times.tostring())
      buff.write(_get_struct_B().pack(self.gain_given))
      length = len(self.gain_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.gain_values.tostring())
      buff.write(_get_struct_B().pack(self.gamma_given))
      length = len(self.gamma_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.gamma_values.tostring())
      buff.write(_get_struct_B().pack(self.brightness_given))
      length = len(self.brightness_values)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.brightness_values.tostring())
      _x = self
      buff.write(_get_struct_2B().pack(_x.exposure_auto, _x.gain_auto))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.exposure_given,) = _get_struct_B().unpack(str[start:end])
      self.exposure_given = bool(self.exposure_given)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.exposure_times = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.gain_given,) = _get_struct_B().unpack(str[start:end])
      self.gain_given = bool(self.gain_given)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.gain_values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.gamma_given,) = _get_struct_B().unpack(str[start:end])
      self.gamma_given = bool(self.gamma_given)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.gamma_values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 1
      (self.brightness_given,) = _get_struct_B().unpack(str[start:end])
      self.brightness_given = bool(self.brightness_given)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.brightness_values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 2
      (_x.exposure_auto, _x.gain_auto,) = _get_struct_2B().unpack(str[start:end])
      self.exposure_auto = bool(self.exposure_auto)
      self.gain_auto = bool(self.gain_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
