#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim:fenc=utf-8
#
# Copyright Â© 2019 Cesar Sinchiguano <cesarsinchiguano@hotmail.es>
#
# Distributed under terms of the MIT license.

"""
Inspired by MoveIt tutorial
"""
#from ur10_class_01 import *

import sys
sys.path.insert(0, '/home/casch/ws_moveit/src/perception_cvut/src/project')
from ur10_class import *
import tf
import tf2_ros
from tf.transformations import *




# moves_deg = np.array([  [0.005111271981149912,  -1.393895451222555,  1.4176969528198242,  -0.010459248219625294,  0.024323483929038048,  -0.053469483052388966],
#                         [0.003471305826678872,  -1.3092907110797327,  1.3098359107971191,  0.013724565505981445,  0.022439338266849518,  -0.054367844258443654],
#                         [-0.09609729448427373,  -1.3362978140460413,  1.3438572883605957,  -0.008995834981099904,  -0.0767586866961878,  -0.038620773945943654],
#                         [-0.10213071504701787,  -1.4240544478045862,  1.4532051086425781,  -0.030325237904683888,  -0.08294994035829717,  -0.038608853016988576],
#                         [-0.1880868116961878,  -1.435408894215719,  1.466181755065918,  -0.031236950551168263,  -0.16876107851137334,  -0.03953105608095342],
#                         [-0.20385438600649053,  -1.5277698675738733,  1.5710444450378418,  -0.04384500185121709,  -0.1845019499408167,  -0.039470974599019826],
#                         [-0.22572833696474248,  -1.6359484831439417,  1.6825461387634277,  -0.04701215425600225,  -0.20651656786073858,  -0.03945905367006475],
#                         [-0.14005595842470342,  -1.6256588141070765,  1.6726808547973633,  -0.04817516008485967,  -0.12080508867372686,  -0.03927928606142217],
#                         [-0.139289681111471,  -1.6151531378375452,  1.7476773262023926,  -0.13340932527651006,  -0.1197732130633753,  -0.039075676594869435],
#                         [-0.23365480104555303,  -1.6263654867755335,  1.7583098411560059,  -0.13228160539735967,  -0.21435052553285772,  -0.03932696977724248],
#                         [-0.2069795767413538,  -1.496530834828512,  1.6215033531188965,  -0.12571984926332647,  -0.18739301363100225,  -0.03943521181215459]])


# moves_deg = np.array([ [0.018349722027778625,  -1.530656639729635,  1.515289306640625,  0.03904831409454346,  0.11059342324733734,  -0.041913811360494435],
#                     [0.0030166541691869497,  -1.3758814970599573,  1.338071346282959,  0.0651634931564331,  0.0952206626534462,  -0.0454943815814417],
#                     [0.029732488095760345,  -1.6197288672076624,  1.6055998802185059,  0.03514969348907471,  0.12199416756629944,  -0.0396502653705042],
#                     [0.204302579164505,  -1.541377369557516,  1.5287690162658691,  0.021126270294189453,  0.2964354157447815,  -0.02634603181947881],
#                     [0.19282543659210205,  -1.5070236364947718,  1.4917020797729492,  0.02404153347015381,  0.28487738966941833,  -0.026645485554830373],
#                     [0.192047581076622,  -1.5029028097735804,  1.5799264907836914,  -0.06828147569765264,  0.2841452360153198,  -0.026477638875142873],
#                     [0.17864397168159485,  -1.4585617224322718,  1.5303897857666016,  -0.0625231901751917,  0.27076297998428345,  -0.02680093446840459],
#                     [0.11991715431213379,  -1.4882662932025355,  1.5632061958312988,  -0.06300288835634404,  0.21209868788719177,  -0.029399696980611623],
#                     [0.023735880851745605,  -1.5281527678119105,  1.6054801940917969,  -0.055949036275045216,  0.11577773094177246,  -0.03917152086366826],
#                     [-0.06866008440126592,  -1.5431254545794886,  1.621755599975586,  0.026212453842163086,  0.02347148023545742,  -0.12290984789003545],
#                     [-0.11362249055971319,  -1.567801300679342,  1.6463961601257324,  -0.19048816362489873,  -0.02168304124941045,  0.09389378130435944],
#                     [0.04195302724838257,  -1.4929855505572718,  1.5676112174987793,  -0.05483371416200811,  0.535070538520813,  0.00011946774611715227],
#                     [0.04197699576616287,  -1.4929736296283167,  1.5675992965698242,  -0.06411868730653936,  -0.20416480699648076,  0.0001314519759034738],
#                     [0.08093584328889847,  -1.537436310444967,  1.6403231620788574,  -0.05711251894106084,  0.735374927520752,  -0.001569096242086232]])
moves_deg = np.array([ [-0.04079276720155889,  -1.7164142767535608,  1.6798458099365234,  -0.6741560141192835,  0.05086741968989372,  0.3627239167690277],
                        [-0.08887893358339483,  -1.079879109059469,  0.8127565383911133,  -0.1521838347064417,  0.7644456624984741,  0.3626759946346283],
                        [-0.12129623094667608,  -0.8265140692340296,  0.6983547210693359,  -0.1383879820453089,  0.1378350704908371,  0.3626759946346283],
                        [0.02464555948972702,  -0.9491828123675745,  0.8695759773254395,  -0.0500109831439417,  0.28101322054862976,  0.22283543646335602],
                        [0.027805274352431297,  -1.0647662321673792,  1.129312515258789,  -0.7554577032672327,  0.38530033826828003,  0.7552937865257263],
                        [0.07247385382652283,  -0.7834776083575647,  0.7739214897155762,  0.26642465591430664,  0.4165671765804291,  -0.16859037080873662],
                        [0.09113328903913498,  -0.8658984343158167,  0.9107537269592285,  0.20185446739196777,  0.43452292680740356,  -0.15717918077577764],
                        [0.02045632340013981,  -0.9327653090106409,  1.0118746757507324,  0.2112826108932495,  0.3663967251777649,  -0.20449811617006475],
                        [0.05851822346448898,  -1.3212197462665003,  1.3527650833129883,  -0.19354755083192998,  -0.43860370317568,  -0.22747451463808233],
                        [0.004572730977088213,  -1.2993863264666956,  1.3191156387329102,  -0.1649721304522913,  -0.49198609987367803,  -0.2460563818560999],
                        [0.011131847277283669,  -1.3259261290179651,  1.3296198844909668,  -0.3050420920001429,  0.9541304707527161,  0.20041145384311676],
                        [0.02016870118677616,  -1.3315795103656214,  1.336270809173584,  -0.3040583769427698,  0.9627957940101624,  0.19718919694423676],
                        [-0.1730259100543421,  -1.624568287526266,  1.745588779449463,  -0.47213775316347295,  0.7791487574577332,  0.2774363160133362],
                        [-0.12993938127626592,  -1.3404300848590296,  1.4232792854309082,  -0.6018598715411585,  0.45013874769210815,  0.27834710478782654],
                        [-0.08691531816591436,  -1.4245331923114222,  1.5448293685913086,  -0.5982373396502894,  0.487959086894989,  0.23240670561790466],
                        [-0.21987420717348272,  -1.5601351896869105,  1.6666440963745117,  -0.7369378248797815,  0.3741740882396698,  0.3997218608856201]])


def move(object_robot):
    import time
    global g_index_last_move
    global g_timestamp_last_move
    global poses
    global joints

    if (time.time() - g_timestamp_last_move) < 6:
        print('time: {}'.format((time.time() - g_timestamp_last_move)))
        return

    g_index_last_move = (g_index_last_move + 1) % len(poses)

    object_robot.go_to_joint_state(moves_deg[g_index_last_move])

    print('g_index_last_move {}'.format(g_index_last_move))

    g_timestamp_last_move = time.time()

def main():
    global home

    br = tf2_ros.TransformBroadcaster()
    r=rospy.Rate(10)

    # #Task space
    # ##########
    # print "============ Press `Enter` to go to --> Home position..."
    # raw_input()
    # object_ur10.go_to_pose_goal(home)
    # #time.sleep(3)
    print "============ Press `Enter` to start start sample poses..."
    raw_input()

    while(not rospy.is_shutdown()):
        try:
            move(object_ur10)
            pose_TCP=object_ur10.move_group.get_current_pose().pose
            print "============ Python movement in JointSpace is completed!"
            r.sleep()
        except rospy.ROSInterruptException:
            return
        except KeyboardInterrupt:
            return

if __name__ == '__main__':
    print ""
    print "----------------------------------------------------------"
    print "Welcome to the MoveIt MoveGroup Python Interface"
    print "----------------------------------------------------------"
    print "Press Ctrl-D to exit at any time"
    print ""
    print "============ Press `Enter` to begin the moveit_commander ..."
    raw_input()
    #create an object in order to get acces to my UniversalRobot
    object_ur10 = UniversalRobot()
    main()


# print(pose_TCP)
# print(pose_TCP.position)
# print(pose_TCP.position.x)
# print(type(pose_TCP.position))
# print(pose_TCP.orientation)
# print(pose_TCP.orientation.w)
# print(type(pose_TCP))



# t = geometry_msgs.msg.TransformStamped()
# t.header.stamp = rospy.Time.now()
# t.header.frame_id = 'tool0'
# t.child_frame_id = 'camera_link'
# t.transform.translation.x = 0.10
# t.transform.translation.y = 0.15
# t.transform.translation.z = 0.30
#
# q2 = tf.transformations.quaternion_from_euler(math.pi,0,0)
# t.transform.rotation.x = q2[0]
# t.transform.rotation.y = q2[1]
# t.transform.rotation.z = q2[2]
# t.transform.rotation.w = q2[3]
# br.sendTransform(t)
