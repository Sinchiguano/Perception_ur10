# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from camera_control_msgs/GetCamPropertiesRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetCamPropertiesRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "camera_control_msgs/GetCamPropertiesRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetCamPropertiesRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from camera_control_msgs/GetCamPropertiesResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetCamPropertiesResponse(genpy.Message):
  _md5sum = "14bd64331efb0f665787f525f453c05d"
  _type = "camera_control_msgs/GetCamPropertiesResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool success

bool is_sleeping

string device_user_id

int32 min_binning_x
int32 max_binning_x
int32 current_binning_x

int32 min_binning_y
int32 max_binning_y
int32 current_binning_y

float32 max_framerate
float32 current_framerate

float32 min_exposure
float32 max_exposure
float32 current_exposure

float32 min_gain_in_cam_units
float32 max_gain_in_cam_units
float32 current_gain_in_cam_units

float32 min_gain
float32 max_gain
float32 current_gain

float32 min_gamma
float32 max_gamma
float32 current_gamma

bool brightness_continuous
bool gain_auto
bool exposure_auto

"""
  __slots__ = ['success','is_sleeping','device_user_id','min_binning_x','max_binning_x','current_binning_x','min_binning_y','max_binning_y','current_binning_y','max_framerate','current_framerate','min_exposure','max_exposure','current_exposure','min_gain_in_cam_units','max_gain_in_cam_units','current_gain_in_cam_units','min_gain','max_gain','current_gain','min_gamma','max_gamma','current_gamma','brightness_continuous','gain_auto','exposure_auto']
  _slot_types = ['bool','bool','string','int32','int32','int32','int32','int32','int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,is_sleeping,device_user_id,min_binning_x,max_binning_x,current_binning_x,min_binning_y,max_binning_y,current_binning_y,max_framerate,current_framerate,min_exposure,max_exposure,current_exposure,min_gain_in_cam_units,max_gain_in_cam_units,current_gain_in_cam_units,min_gain,max_gain,current_gain,min_gamma,max_gamma,current_gamma,brightness_continuous,gain_auto,exposure_auto

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetCamPropertiesResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.is_sleeping is None:
        self.is_sleeping = False
      if self.device_user_id is None:
        self.device_user_id = ''
      if self.min_binning_x is None:
        self.min_binning_x = 0
      if self.max_binning_x is None:
        self.max_binning_x = 0
      if self.current_binning_x is None:
        self.current_binning_x = 0
      if self.min_binning_y is None:
        self.min_binning_y = 0
      if self.max_binning_y is None:
        self.max_binning_y = 0
      if self.current_binning_y is None:
        self.current_binning_y = 0
      if self.max_framerate is None:
        self.max_framerate = 0.
      if self.current_framerate is None:
        self.current_framerate = 0.
      if self.min_exposure is None:
        self.min_exposure = 0.
      if self.max_exposure is None:
        self.max_exposure = 0.
      if self.current_exposure is None:
        self.current_exposure = 0.
      if self.min_gain_in_cam_units is None:
        self.min_gain_in_cam_units = 0.
      if self.max_gain_in_cam_units is None:
        self.max_gain_in_cam_units = 0.
      if self.current_gain_in_cam_units is None:
        self.current_gain_in_cam_units = 0.
      if self.min_gain is None:
        self.min_gain = 0.
      if self.max_gain is None:
        self.max_gain = 0.
      if self.current_gain is None:
        self.current_gain = 0.
      if self.min_gamma is None:
        self.min_gamma = 0.
      if self.max_gamma is None:
        self.max_gamma = 0.
      if self.current_gamma is None:
        self.current_gamma = 0.
      if self.brightness_continuous is None:
        self.brightness_continuous = False
      if self.gain_auto is None:
        self.gain_auto = False
      if self.exposure_auto is None:
        self.exposure_auto = False
    else:
      self.success = False
      self.is_sleeping = False
      self.device_user_id = ''
      self.min_binning_x = 0
      self.max_binning_x = 0
      self.current_binning_x = 0
      self.min_binning_y = 0
      self.max_binning_y = 0
      self.current_binning_y = 0
      self.max_framerate = 0.
      self.current_framerate = 0.
      self.min_exposure = 0.
      self.max_exposure = 0.
      self.current_exposure = 0.
      self.min_gain_in_cam_units = 0.
      self.max_gain_in_cam_units = 0.
      self.current_gain_in_cam_units = 0.
      self.min_gain = 0.
      self.max_gain = 0.
      self.current_gain = 0.
      self.min_gamma = 0.
      self.max_gamma = 0.
      self.current_gamma = 0.
      self.brightness_continuous = False
      self.gain_auto = False
      self.exposure_auto = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.success, _x.is_sleeping))
      _x = self.device_user_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6i14f3B().pack(_x.min_binning_x, _x.max_binning_x, _x.current_binning_x, _x.min_binning_y, _x.max_binning_y, _x.current_binning_y, _x.max_framerate, _x.current_framerate, _x.min_exposure, _x.max_exposure, _x.current_exposure, _x.min_gain_in_cam_units, _x.max_gain_in_cam_units, _x.current_gain_in_cam_units, _x.min_gain, _x.max_gain, _x.current_gain, _x.min_gamma, _x.max_gamma, _x.current_gamma, _x.brightness_continuous, _x.gain_auto, _x.exposure_auto))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.success, _x.is_sleeping,) = _get_struct_2B().unpack(str[start:end])
      self.success = bool(self.success)
      self.is_sleeping = bool(self.is_sleeping)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.device_user_id = str[start:end].decode('utf-8')
      else:
        self.device_user_id = str[start:end]
      _x = self
      start = end
      end += 83
      (_x.min_binning_x, _x.max_binning_x, _x.current_binning_x, _x.min_binning_y, _x.max_binning_y, _x.current_binning_y, _x.max_framerate, _x.current_framerate, _x.min_exposure, _x.max_exposure, _x.current_exposure, _x.min_gain_in_cam_units, _x.max_gain_in_cam_units, _x.current_gain_in_cam_units, _x.min_gain, _x.max_gain, _x.current_gain, _x.min_gamma, _x.max_gamma, _x.current_gamma, _x.brightness_continuous, _x.gain_auto, _x.exposure_auto,) = _get_struct_6i14f3B().unpack(str[start:end])
      self.brightness_continuous = bool(self.brightness_continuous)
      self.gain_auto = bool(self.gain_auto)
      self.exposure_auto = bool(self.exposure_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.success, _x.is_sleeping))
      _x = self.device_user_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_6i14f3B().pack(_x.min_binning_x, _x.max_binning_x, _x.current_binning_x, _x.min_binning_y, _x.max_binning_y, _x.current_binning_y, _x.max_framerate, _x.current_framerate, _x.min_exposure, _x.max_exposure, _x.current_exposure, _x.min_gain_in_cam_units, _x.max_gain_in_cam_units, _x.current_gain_in_cam_units, _x.min_gain, _x.max_gain, _x.current_gain, _x.min_gamma, _x.max_gamma, _x.current_gamma, _x.brightness_continuous, _x.gain_auto, _x.exposure_auto))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.success, _x.is_sleeping,) = _get_struct_2B().unpack(str[start:end])
      self.success = bool(self.success)
      self.is_sleeping = bool(self.is_sleeping)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.device_user_id = str[start:end].decode('utf-8')
      else:
        self.device_user_id = str[start:end]
      _x = self
      start = end
      end += 83
      (_x.min_binning_x, _x.max_binning_x, _x.current_binning_x, _x.min_binning_y, _x.max_binning_y, _x.current_binning_y, _x.max_framerate, _x.current_framerate, _x.min_exposure, _x.max_exposure, _x.current_exposure, _x.min_gain_in_cam_units, _x.max_gain_in_cam_units, _x.current_gain_in_cam_units, _x.min_gain, _x.max_gain, _x.current_gain, _x.min_gamma, _x.max_gamma, _x.current_gamma, _x.brightness_continuous, _x.gain_auto, _x.exposure_auto,) = _get_struct_6i14f3B().unpack(str[start:end])
      self.brightness_continuous = bool(self.brightness_continuous)
      self.gain_auto = bool(self.gain_auto)
      self.exposure_auto = bool(self.exposure_auto)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6i14f3B = None
def _get_struct_6i14f3B():
    global _struct_6i14f3B
    if _struct_6i14f3B is None:
        _struct_6i14f3B = struct.Struct("<6i14f3B")
    return _struct_6i14f3B
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
class GetCamProperties(object):
  _type          = 'camera_control_msgs/GetCamProperties'
  _md5sum = '14bd64331efb0f665787f525f453c05d'
  _request_class  = GetCamPropertiesRequest
  _response_class = GetCamPropertiesResponse
