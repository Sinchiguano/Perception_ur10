// Auto-generated. Do not edit!

// (in-package camera_control_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let GrabAndSaveImageGoal = require('./GrabAndSaveImageGoal.js');
let actionlib_msgs = _finder('actionlib_msgs');
let std_msgs = _finder('std_msgs');

//-----------------------------------------------------------

class GrabAndSaveImageActionGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.header = null;
      this.goal_id = null;
      this.goal = null;
    }
    else {
      if (initObj.hasOwnProperty('header')) {
        this.header = initObj.header
      }
      else {
        this.header = new std_msgs.msg.Header();
      }
      if (initObj.hasOwnProperty('goal_id')) {
        this.goal_id = initObj.goal_id
      }
      else {
        this.goal_id = new actionlib_msgs.msg.GoalID();
      }
      if (initObj.hasOwnProperty('goal')) {
        this.goal = initObj.goal
      }
      else {
        this.goal = new GrabAndSaveImageGoal();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type GrabAndSaveImageActionGoal
    // Serialize message field [header]
    bufferOffset = std_msgs.msg.Header.serialize(obj.header, buffer, bufferOffset);
    // Serialize message field [goal_id]
    bufferOffset = actionlib_msgs.msg.GoalID.serialize(obj.goal_id, buffer, bufferOffset);
    // Serialize message field [goal]
    bufferOffset = GrabAndSaveImageGoal.serialize(obj.goal, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type GrabAndSaveImageActionGoal
    let len;
    let data = new GrabAndSaveImageActionGoal(null);
    // Deserialize message field [header]
    data.header = std_msgs.msg.Header.deserialize(buffer, bufferOffset);
    // Deserialize message field [goal_id]
    data.goal_id = actionlib_msgs.msg.GoalID.deserialize(buffer, bufferOffset);
    // Deserialize message field [goal]
    data.goal = GrabAndSaveImageGoal.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += std_msgs.msg.Header.getMessageSize(object.header);
    length += actionlib_msgs.msg.GoalID.getMessageSize(object.goal_id);
    length += GrabAndSaveImageGoal.getMessageSize(object.goal);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'camera_control_msgs/GrabAndSaveImageActionGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'ca187b6ecb464f9dbe4befbffca80547';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    GrabAndSaveImageGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: camera_control_msgs/GrabAndSaveImageGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # The 'GrabAndSaveImageAction' has a similar goal as the 'GrabImagesAction' in
    # case of only grabbing one image. It additionally contains a string describing
    # the full storage path of the image to be captured.
    # It wont provide the grabbed image via the result topic. Instead it only
    # returns a flag indicating the success.
    
    ##########################################
    ################## GOAL ##################
    ##########################################
    
    # Flag which indicates if the exposure time is provided and hence should be
    # set before grabbing
    bool exposure_given
    
    # Only relevant, if exposure_given is true:
    # The target exposure time in microseconds. This values can be overriden from
    # the brightness search, in case that the flag exposure_fixed is not true.
    float32 exposure_time
    
    # Flag which indicates if the gain is provided and hence should be set before
    # grabbing
    bool gain_given
    
    # Only relevant, if gain_given is true:
    # The target gain in percent of the maximal value the camera supports.
    # For USB-Cameras, the gain is in dB, for GigE-Cameras it is given in so
    # called 'device specific units'. This value can be overriden from the
    # brightness search, in case that the gain_fixed flag is set to false.
    float32 gain_value
    
    # Flag which indicates if the gamma value is provided and hence should be set
    # before grabbing
    bool gamma_given
    
    # Only relevant, if gain_given is true:
    # Gamma correction of pixel intensity.
    # Adjusts the brightness of the pixel values output by the camera's sensor
    # to account for a non-linearity in the human perception of brightness or
    # of the display system (such as CRT).
    float32 gamma_value
    
    # Flag which indicates if the brightness value is provided and hence should
    # be set before grabbing
    bool brightness_given
    
    # Only relevant, if brightness_given is true:
    # The average intensity value of the resulting image. It depends the exposure
    # time as well as the gain setting.
    float32 brightness_value
    
    # Only relevant, if brightness_given is true:
    # If the camera should try reach the desired brightness, at least one of the
    # following flags MUST be set. If both are set, the interface will use the
    # profile that tries to keep the gain at minimum to reduce white noise.
    # 'exposure_auto' will adapt the exposure time to reach the brightness, wheras
    # 'gain_auto' does so by adapting the gain. If one of these flags is set to
    # false, the connected property will be kept fix.
    # In most of the cases trying to reach a target brightness only by varying the
    # gain and keeping the exposure time fix is not a good approach, because the
    # exposure range is many times higher than the gain range.
    bool exposure_auto
    bool gain_auto
    
    # File path and image name (including file-extension) to store the grabbed
    # image
    string img_storage_path_and_name
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new GrabAndSaveImageActionGoal(null);
    if (msg.header !== undefined) {
      resolved.header = std_msgs.msg.Header.Resolve(msg.header)
    }
    else {
      resolved.header = new std_msgs.msg.Header()
    }

    if (msg.goal_id !== undefined) {
      resolved.goal_id = actionlib_msgs.msg.GoalID.Resolve(msg.goal_id)
    }
    else {
      resolved.goal_id = new actionlib_msgs.msg.GoalID()
    }

    if (msg.goal !== undefined) {
      resolved.goal = GrabAndSaveImageGoal.Resolve(msg.goal)
    }
    else {
      resolved.goal = new GrabAndSaveImageGoal()
    }

    return resolved;
    }
};

module.exports = GrabAndSaveImageActionGoal;
