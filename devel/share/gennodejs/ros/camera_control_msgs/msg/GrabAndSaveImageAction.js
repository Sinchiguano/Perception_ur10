// Auto-generated. Do not edit!

// (in-package camera_control_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let GrabAndSaveImageActionGoal = require('./GrabAndSaveImageActionGoal.js');
let GrabAndSaveImageActionResult = require('./GrabAndSaveImageActionResult.js');
let GrabAndSaveImageActionFeedback = require('./GrabAndSaveImageActionFeedback.js');

//-----------------------------------------------------------

class GrabAndSaveImageAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new GrabAndSaveImageActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new GrabAndSaveImageActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new GrabAndSaveImageActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type GrabAndSaveImageAction
    // Serialize message field [action_goal]
    bufferOffset = GrabAndSaveImageActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = GrabAndSaveImageActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = GrabAndSaveImageActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type GrabAndSaveImageAction
    let len;
    let data = new GrabAndSaveImageAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = GrabAndSaveImageActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = GrabAndSaveImageActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = GrabAndSaveImageActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += GrabAndSaveImageActionGoal.getMessageSize(object.action_goal);
    length += GrabAndSaveImageActionResult.getMessageSize(object.action_result);
    length += GrabAndSaveImageActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'camera_control_msgs/GrabAndSaveImageAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '73ee0bc746d695d001857c92d633e3c0';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    GrabAndSaveImageActionGoal action_goal
    GrabAndSaveImageActionResult action_result
    GrabAndSaveImageActionFeedback action_feedback
    
    ================================================================================
    MSG: camera_control_msgs/GrabAndSaveImageActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    GrabAndSaveImageGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: camera_control_msgs/GrabAndSaveImageGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # The 'GrabAndSaveImageAction' has a similar goal as the 'GrabImagesAction' in
    # case of only grabbing one image. It additionally contains a string describing
    # the full storage path of the image to be captured.
    # It wont provide the grabbed image via the result topic. Instead it only
    # returns a flag indicating the success.
    
    ##########################################
    ################## GOAL ##################
    ##########################################
    
    # Flag which indicates if the exposure time is provided and hence should be
    # set before grabbing
    bool exposure_given
    
    # Only relevant, if exposure_given is true:
    # The target exposure time in microseconds. This values can be overriden from
    # the brightness search, in case that the flag exposure_fixed is not true.
    float32 exposure_time
    
    # Flag which indicates if the gain is provided and hence should be set before
    # grabbing
    bool gain_given
    
    # Only relevant, if gain_given is true:
    # The target gain in percent of the maximal value the camera supports.
    # For USB-Cameras, the gain is in dB, for GigE-Cameras it is given in so
    # called 'device specific units'. This value can be overriden from the
    # brightness search, in case that the gain_fixed flag is set to false.
    float32 gain_value
    
    # Flag which indicates if the gamma value is provided and hence should be set
    # before grabbing
    bool gamma_given
    
    # Only relevant, if gain_given is true:
    # Gamma correction of pixel intensity.
    # Adjusts the brightness of the pixel values output by the camera's sensor
    # to account for a non-linearity in the human perception of brightness or
    # of the display system (such as CRT).
    float32 gamma_value
    
    # Flag which indicates if the brightness value is provided and hence should
    # be set before grabbing
    bool brightness_given
    
    # Only relevant, if brightness_given is true:
    # The average intensity value of the resulting image. It depends the exposure
    # time as well as the gain setting.
    float32 brightness_value
    
    # Only relevant, if brightness_given is true:
    # If the camera should try reach the desired brightness, at least one of the
    # following flags MUST be set. If both are set, the interface will use the
    # profile that tries to keep the gain at minimum to reduce white noise.
    # 'exposure_auto' will adapt the exposure time to reach the brightness, wheras
    # 'gain_auto' does so by adapting the gain. If one of these flags is set to
    # false, the connected property will be kept fix.
    # In most of the cases trying to reach a target brightness only by varying the
    # gain and keeping the exposure time fix is not a good approach, because the
    # exposure range is many times higher than the gain range.
    bool exposure_auto
    bool gain_auto
    
    # File path and image name (including file-extension) to store the grabbed
    # image
    string img_storage_path_and_name
    
    ================================================================================
    MSG: camera_control_msgs/GrabAndSaveImageActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    GrabAndSaveImageResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: camera_control_msgs/GrabAndSaveImageResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    ##########################################
    ################# RESULT #################
    ##########################################
    
    # Flag which indicates the success of ithe grabbing and storage action.
    bool success
    
    ================================================================================
    MSG: camera_control_msgs/GrabAndSaveImageActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    GrabAndSaveImageFeedback feedback
    
    ================================================================================
    MSG: camera_control_msgs/GrabAndSaveImageFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    # No Feedback
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new GrabAndSaveImageAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = GrabAndSaveImageActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new GrabAndSaveImageActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = GrabAndSaveImageActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new GrabAndSaveImageActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = GrabAndSaveImageActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new GrabAndSaveImageActionFeedback()
    }

    return resolved;
    }
};

module.exports = GrabAndSaveImageAction;
